# Production Docker Compose configuration for MoxNAS
version: '3.8'

services:
  # Main MoxNAS application
  moxnas:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: moxnas:latest
    container_name: moxnas-app
    restart: unless-stopped
    
    # Environment variables
    environment:
      - DJANGO_SETTINGS_MODULE=moxnas.settings
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///var/lib/moxnas/db.sqlite3}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - CREATE_SUPERUSER=${CREATE_SUPERUSER:-true}
      - SUPERUSER_USERNAME=${SUPERUSER_USERNAME:-admin}
      - SUPERUSER_EMAIL=${SUPERUSER_EMAIL:-admin@moxnas.local}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD:-moxnas123}
    
    # Port mapping
    ports:
      - "8000:8000"    # Web interface
      - "139:139"      # SMB NetBIOS
      - "445:445"      # SMB
      - "2049:2049"    # NFS
      - "21:21"        # FTP
      - "20000-20100:20000-20100"  # FTP passive mode
    
    # Volume mounts
    volumes:
      - moxnas_data:/var/lib/moxnas
      - moxnas_logs:/var/log/moxnas
      - moxnas_config:/etc/moxnas
      - storage_data:/mnt/storage
      # Optional: bind mount for external storage
      # - /path/to/external/storage:/mnt/external:rw
    
    # Dependencies
    depends_on:
      - redis
      - postgres
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Network
    networks:
      - moxnas_network

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    container_name: moxnas-redis
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volume for persistence
    volumes:
      - redis_data:/data
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Network
    networks:
      - moxnas_network

  # PostgreSQL database (optional, can use SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: moxnas-postgres
    restart: unless-stopped
    
    # Environment variables
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-moxnas}
      - POSTGRES_USER=${POSTGRES_USER:-moxnas}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-moxnas_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    # Volume for data persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Network
    networks:
      - moxnas_network

  # Nginx reverse proxy (optional, for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: moxnas-nginx
    restart: unless-stopped
    
    # Port mapping (if using external nginx)
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./config/nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
      - nginx_logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      - moxnas
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Network
    networks:
      - moxnas_network

  # Monitoring and metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: moxnas-prometheus
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Command line arguments
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Port mapping
    ports:
      - "9090:9090"
    
    # Network
    networks:
      - moxnas_network

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: moxnas-grafana
    restart: unless-stopped
    
    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volume for data persistence
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Network
    networks:
      - moxnas_network

# Named volumes for data persistence
volumes:
  moxnas_data:
    driver: local
  moxnas_logs:
    driver: local
  moxnas_config:
    driver: local
  storage_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  moxnas_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16