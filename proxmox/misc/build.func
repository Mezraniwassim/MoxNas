#!/usr/bin/env bash

# Copyright (c) 2025 Wassim Mezrani
# Author: Wassim Mezrani 
# License: MIT | https://github.com/YOUR_USERNAME/MoxNAS/raw/main/LICENSE
# Source: https://github.com/YOUR_USERNAME/MoxNAS

# MoxNAS Build Functions for Proxmox Helper Scripts
# Based on community-scripts framework with MoxNAS-specific enhancements

variables() {
  NSAPP=$(echo "${APP,,}" | tr -d ' ')              # Convert APP to lowercase and remove spaces
  var_install="${NSAPP}-install"                    # Set installation script name
  INTEGER='^[0-9]+([.][0-9]+)?$'                   # Regular expression for integer validation
  PVEHOST_NAME=$(hostname)                          # Get Proxmox hostname
  DIAGNOSTICS="yes"                                 # Enable diagnostics
  METHOD="default"                                  # Set default method
  RANDOM_UUID="$(cat /proc/sys/kernel/random/uuid)" # Generate random UUID
  CT_TYPE=${var_unprivileged:-$CT_TYPE}
  
  # MoxNAS specific variables
  MOXNAS_REPO="https://raw.githubusercontent.com/YOUR_USERNAME/MoxNAS/main"
  FUNCTIONS_FILE_PATH="$(curl -fsSL ${MOXNAS_REPO}/proxmox/misc/install.func)"
}

# Enhanced error handling for MoxNAS installation
catch_errors() {
  set -Eeuo pipefail
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

error_handler() {
  printf "\e[?25h"
  local exit_code="$?"
  local line_number="$1"
  local command="$2"
  local error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"
  echo -e "\n$error_message\n"
  
  # Provide specific error hints for common MoxNAS issues
  case "$command" in
    *curl*|*wget*)
      echo -e "${YW}Hint: Check internet connectivity and DNS resolution${CL}"
      ;;
    *npm*|*node*)
      echo -e "${YW}Hint: Node.js memory issue - try reducing workers or increasing memory${CL}"
      ;;
    *gunicorn*|*systemctl*)
      echo -e "${YW}Hint: Service startup issue - check logs with: journalctl -u moxnas${CL}"
      ;;
    *git*)
      echo -e "${YW}Hint: Git repository access issue - check network and repository URL${CL}"
      ;;
  esac
}

# Check if running as root
root_check() {
  if [[ "$(id -u)" -ne 0 || $(ps -o comm= -p $PPID) == "sudo" ]]; then
    clear
    msg_error "Please run this script as root."
    echo -e "\nExiting..."
    sleep 2
    exit
  fi
}

# Check Proxmox VE version compatibility
pve_check() {
  local PVE_VER
  PVE_VER="$(pveversion | awk -F'/' '{print $2}' | awk -F'-' '{print $1}')"

  # Check for Proxmox VE 8.x: allow 8.0–8.9
  if [[ "$PVE_VER" =~ ^8\.([0-9]+) ]]; then
    local MINOR="${BASH_REMATCH[1]}"
    if ((MINOR < 0 || MINOR > 9)); then
      msg_error "This version of Proxmox VE is not supported."
      msg_error "Supported: Proxmox VE version 8.0 – 8.9"
      exit 1
    fi
    return 0
  fi

  # Check for Proxmox VE 9.x: allow ONLY 9.0
  if [[ "$PVE_VER" =~ ^9\.([0-9]+) ]]; then
    local MINOR="${BASH_REMATCH[1]}"
    if ((MINOR != 0)); then
      msg_error "This version of Proxmox VE is not yet supported."
      msg_error "Supported: Proxmox VE version 9.0"
      exit 1
    fi
    return 0
  fi

  # All other unsupported versions
  msg_error "This version of Proxmox VE is not supported."
  msg_error "Supported versions: Proxmox VE 8.0 – 8.x or 9.0"
  exit 1
}

# Color definitions
color() {
  YW=$(echo "\033[33m")
  YWB=$'\e[93m'
  BL=$(echo "\033[36m")
  RD=$(echo "\033[01;31m")
  BGN=$(echo "\033[4;92m")
  GN=$(echo "\033[1;92m")
  DGN=$(echo "\033[32m")
  CL=$(echo "\033[m")
  BFR="\\r\\033[K"
  HOLD=" "
  TAB="  "
  TAB3="      "
  CM="${TAB}✓"
  CROSS="${TAB}✗"
  INFO="${TAB}[INFO]"
  WARN="${TAB}[WARN]"
  ERROR="${TAB}[ERROR]"
  CREATING="${TAB}[CREATING]"
  GATEWAY="${TAB}[GATEWAY]"
  BOLD=$(echo "\033[1m")
}

# Formatting helpers
formatting() {
  BFR="\\r\\033[K"
  BOLD=$(echo "\033[1m")
  HOLD=" "
  TAB="  "
  TAB3="      "
}

# Icon definitions  
icons() {
  CM="${TAB}✓"
  CROSS="${TAB}✗"
  INFO="${TAB}[INFO]"
  WARN="${TAB}[WARN]"
  ERROR="${TAB}[ERROR]"
  CREATING="${TAB}[CREATING]"
  GATEWAY="${TAB}[GATEWAY]"
}

# Default variables
default_vars() {
  STD="silent"
  NEXTID=$(pvesh get /cluster/nextid)
  TIMEZONE=$(cat /etc/timezone)
  
  # MoxNAS specific defaults
  CT_TYPE="1"
  PW=""
  CT_ID=$NEXTID
  HN=$NSAPP
  DISK_SIZE="$var_disk"
  CORE_COUNT="$var_cpu"
  RAM_SIZE="$var_ram"
  BRG="vmbr0"
  NET="dhcp"
  GATE=""
  APT_CACHER=""
  APT_CACHER_IP=""
  DISABLEIP6="no"
  MTU=""
  SD=""
  NS=""
  MAC=""
  VLAN=""
  SSH="no"
  VERB="no"
}

# Silent execution mode
set_std_mode() {
  if [[ "$VERB" == "yes" ]]; then
    STD=""
  else
    STD="silent"
  fi
}

# Silent command execution
silent() {
  if [[ "$STD" == "silent" ]]; then
    "$@" >/dev/null 2>&1
  else
    "$@"
  fi
}

# Message functions
msg_info() {
  local msg="$1"
  echo -ne " ${HOLD} ${YW}${msg}..."
}

msg_ok() {
  local msg="$1"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

msg_error() {
  local msg="$1"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

msg_warn() {
  local msg="$1"
  echo -e "${BFR} ${WARN} ${YW}${msg}${CL}"
}

# MoxNAS header with logo
header_info() {
  local APP_NAME="$1"
  clear
  cat <<"EOF"
    __  ___          _   ___   ___   _____
   /  |/  /___  _  _/ | / / | / _ | / ___/
  / /|_/ / __ \| |/_/  |/ /  |/ __ |/ __ \ 
 / /  / / /_/ />  </|  /|  / /_/ / /_/ /
/_/  /_/\____/_/|_/ |_/ |_/_____/\____/ 
                                        
  Network Attached Storage for Proxmox
EOF
  echo -e "\n Loading..."
}

# Network connectivity check with fallbacks (FIX: Network issues from conversation)
network_check() {
  msg_info "Checking network connectivity"
  
  # Test multiple connectivity methods to handle ICMP blocking
  local connectivity_ok=false
  
  # Method 1: Try ping to Google DNS (most common)
  if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    connectivity_ok=true
  # Method 2: Try ping to Cloudflare DNS as fallback
  elif ping -c 1 1.1.1.1 >/dev/null 2>&1; then
    connectivity_ok=true
  # Method 3: Try HTTP connection if ping is blocked
  elif curl -s --connect-timeout 5 http://www.google.com >/dev/null 2>&1; then
    connectivity_ok=true
  # Method 4: Try wget as final fallback
  elif wget -q --spider --timeout=5 http://www.google.com >/dev/null 2>&1; then
    connectivity_ok=true
  fi
  
  if [ "$connectivity_ok" = true ]; then
    msg_ok "Network connectivity verified"
  else
    msg_error "Network connectivity check failed"
    echo -e "${ERROR} ${RD}No internet connectivity detected${CL}"
    echo -e "${INFO} ${YW}Please check:${CL}"
    echo -e "${TAB}- Network interface configuration"
    echo -e "${TAB}- DNS settings"
    echo -e "${TAB}- Firewall rules"
    echo -e "${TAB}- Proxy settings"
    exit 1
  fi
}

# Enhanced DNS check with fallbacks
dns_check() {
  msg_info "Checking DNS resolution"
  
  local dns_ok=false
  
  # Test DNS resolution with multiple methods
  if nslookup github.com >/dev/null 2>&1; then
    dns_ok=true
  elif host github.com >/dev/null 2>&1; then
    dns_ok=true
  elif dig github.com >/dev/null 2>&1; then
    dns_ok=true
  fi
  
  if [ "$dns_ok" = true ]; then
    msg_ok "DNS resolution working"
  else
    msg_warn "DNS resolution issues detected"
    echo -e "${INFO} ${YW}Adding fallback DNS servers...${CL}"
    
    # Add Google and Cloudflare DNS as fallbacks
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    
    # Test again with fallback DNS
    sleep 2
    if nslookup github.com >/dev/null 2>&1; then
      msg_ok "DNS resolution fixed with fallback servers"
    else
      msg_error "DNS resolution still failing"
      exit 1
    fi
  fi
}

# Container resource verification
check_container_resources() {
  msg_info "Checking container resources"
  
  # Check minimum RAM requirement (2GB for MoxNAS)
  local available_ram=$(free -m | awk '/^Mem:/{print $7}')
  if [ "$available_ram" -lt 1500 ]; then
    msg_warn "Low available RAM detected (${available_ram}MB)"
    echo -e "${INFO} ${YW}MoxNAS requires at least 2GB RAM for optimal performance${CL}"
    echo -e "${INFO} ${YW}Consider increasing RAM allocation${CL}"
  else
    msg_ok "Sufficient RAM available (${available_ram}MB)"
  fi
  
  # Check available disk space
  local available_disk=$(df / | awk 'NR==2{printf "%.0f", $4/1024/1024}')
  if [ "$available_disk" -lt 5 ]; then
    msg_error "Insufficient disk space (${available_disk}GB available)"
    echo -e "${ERROR} ${RD}MoxNAS requires at least 8GB disk space${CL}"
    exit 1
  else
    msg_ok "Sufficient disk space available (${available_disk}GB)"
  fi
}

# Storage validation
check_container_storage() {
  msg_info "Validating storage configuration"
  
  # Check if we're in a container
  if [ -f /.dockerenv ] || [ -f /run/.containerenv ]; then
    msg_ok "Running in container environment"
  else
    msg_warn "Not detected as container environment"
  fi
  
  # Validate storage paths
  if [ ! -d "/mnt" ]; then
    mkdir -p /mnt
    msg_ok "Created mount directory"
  fi
  
  msg_ok "Storage validation completed"
}

# Enhanced start function with comprehensive checks
start() {
  root_check
  pve_check
  network_check
  dns_check
  
  # Interactive menu for advanced configuration
  if command -v whiptail >/dev/null 2>&1; then
    if whiptail --title "${APP} LXC" --yesno "This will create a New ${APP} LXC. Proceed?" 10 58; then
      echo "User confirmed installation"
    else
      clear
      echo -e "⚠ User cancelled installation"
      exit
    fi
  fi
  
  echo -e "${INFO} ${YW}Creating ${APP} LXC Container...${CL}"
}

# Container creation function
build_container() {
  msg_info "Building LXC Container"
  
  # Set features for unprivileged container
  if [[ "$CT_TYPE" == "1" ]]; then
    FEATURES="nesting=1,keyctl=1"
  else
    FEATURES="nesting=1"
  fi
  
  # Generate MAC address if not provided
  if [[ -z "$MAC" ]]; then
    MAC=$(pvesh get /nodes/${HOSTNAME}/qemu/${CT_ID}/config 2>/dev/null | grep net0 | cut -d'=' -f2 | cut -d',' -f3 | cut -d'=' -f2 2>/dev/null || echo "")
    if [[ -z "$MAC" ]]; then
      MAC=$(printf '02:%02x:%02x:%02x:%02x:%02x\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)))
    fi
  fi
  
  # Build container options
  local PCT_OPTIONS="
    -features $FEATURES
    -hostname $HN
    -tags proxmox-helper-scripts,nas,storage
    -net0 name=eth0,bridge=$BRG,hwaddr=$MAC,ip=$NET,gw=$GATE,type=veth
    -onboot 1
    -cores $CORE_COUNT
    -memory $RAM_SIZE
    -unprivileged $CT_TYPE
    -ostype debian
    -ostemplate local:vztmpl/debian-12-standard_12.2-1_amd64.tar.zst"
  
  # Add optional parameters
  [[ -n "$SD" ]] && PCT_OPTIONS="$PCT_OPTIONS -searchdomain $SD"
  [[ -n "$NS" ]] && PCT_OPTIONS="$PCT_OPTIONS -nameserver $NS"
  [[ -n "$MTU" ]] && PCT_OPTIONS="$PCT_OPTIONS,mtu=$MTU"
  [[ -n "$VLAN" ]] && PCT_OPTIONS="$PCT_OPTIONS,tag=$VLAN"
  [[ "$SSH" == "yes" ]] && PCT_OPTIONS="$PCT_OPTIONS -ssh-public-keys /root/.ssh/id_rsa.pub"
  
  # Create the container
  if pct create $CT_ID $PCT_OPTIONS >/dev/null 2>&1; then
    msg_ok "LXC Container $CT_ID created"
  else
    msg_error "Failed to create LXC Container"
    exit 1
  fi
  
  # Start the container
  msg_info "Starting LXC Container"
  if pct start $CT_ID >/dev/null 2>&1; then
    msg_ok "LXC Container $CT_ID started"
  else
    msg_error "Failed to start LXC Container"
    exit 1
  fi
  
  # Wait for container to be ready
  msg_info "Waiting for container to be ready"
  sleep 10
  
  # Get container IP
  IP=$(pct exec $CT_ID -- ip a s dev eth0 | awk '/inet / {print $2}' | cut -d/ -f1)
  if [[ -z "$IP" ]]; then
    msg_warn "Could not detect container IP, using DHCP"
    sleep 5
    IP=$(pct exec $CT_ID -- ip a s dev eth0 | awk '/inet / {print $2}' | cut -d/ -f1)
  fi
  
  # Execute installation script inside container
  msg_info "Installing MoxNAS"
  if pct exec $CT_ID -- bash -c "$(curl -fsSL ${MOXNAS_REPO}/proxmox/install/moxnas-install.sh)"; then
    msg_ok "MoxNAS installation completed"
  else
    msg_error "MoxNAS installation failed"
    exit 1
  fi
}

# Set container description with MoxNAS info
description() {
  IP=$(pct exec $CT_ID -- ip a s dev eth0 | awk '/inet / {print $2}' | cut -d/ -f1)
  pct set $CT_ID -description "# ${APP} LXC
### https://github.com/YOUR_USERNAME/MoxNAS
<a href='http://${IP}:8000'><img src='https://raw.githubusercontent.com/YOUR_USERNAME/MoxNAS/main/docs/logo.png'/></a>

**Installation completed successfully!**

Access your MoxNAS instance at: http://${IP}:8000

Default credentials:
- Username: admin
- Password: admin123

Services available:
- Web Interface: http://${IP}:8000
- FTP Server: ftp://${IP}:21
- SMB Shares: \\\\${IP}\\
- NFS Shares: ${IP}:/mnt/storage"
}

# Echo container configuration details
echo_default() {
  echo -e "${DGN}Using Container Type: ${BGN}$CT_TYPE${CL}"
  echo -e "${DGN}Using Root Password: ${BGN}Automatic Login${CL}"
  echo -e "${DGN}Using Container ID: ${BGN}$CT_ID${CL}"
  echo -e "${DGN}Using Hostname: ${BGN}$HN${CL}"
  echo -e "${DGN}Using Disk Size: ${BGN}$DISK_SIZE${CL}${DGN}GB${CL}"
  echo -e "${DGN}Allocated Cores: ${BGN}$CORE_COUNT${CL}"
  echo -e "${DGN}Allocated RAM: ${BGN}$RAM_SIZE${CL}${DGN}MB${CL}"
  echo -e "${DGN}Using Bridge: ${BGN}$BRG${CL}"
  echo -e "${DGN}Using Static IP: ${BGN}$NET${CL}"
  echo -e "${DGN}Using Gateway: ${BGN}$GATE${CL}"
  echo -e "${DGN}Disable IPv6: ${BGN}$DISABLEIP6${CL}"
  echo -e "${DGN}Using Interface MTU Size: ${BGN}$MTU${CL}"
  echo -e "${DGN}Using DNS Search Domain: ${BGN}$SD${CL}"
  echo -e "${DGN}Using DNS Server Address: ${BGN}$NS${CL}"
  echo -e "${DGN}Using MAC Address: ${BGN}$MAC${CL}"
  echo -e "${DGN}Using VLAN Tag: ${BGN}$VLAN${CL}"
  echo -e "${DGN}Enable Root SSH Access: ${BGN}$SSH${CL}"
  echo -e "${DGN}Enable Verbose Mode: ${BGN}$VERB${CL}"
  echo -e "${BL}Creating a ${APP} LXC using the above default settings${CL}"
}

# Load all functions
load_functions() {
  [[ -n "${__FUNCTIONS_LOADED:-}" ]] && return
  __FUNCTIONS_LOADED=1
  color
  formatting
  icons
  default_vars
  set_std_mode
}