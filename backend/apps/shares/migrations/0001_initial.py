# Generated by Django 4.2.7 on 2025-08-17 17:44

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("storage", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SMBShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Share name", max_length=100, unique=True
                    ),
                ),
                ("path", models.CharField(help_text="Share path", max_length=255)),
                (
                    "comment",
                    models.TextField(blank=True, help_text="Share description"),
                ),
                ("read_only", models.BooleanField(default=False)),
                (
                    "guest_ok",
                    models.BooleanField(default=False, help_text="Allow guest access"),
                ),
                (
                    "browseable",
                    models.BooleanField(
                        default=True, help_text="Visible in network browser"
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                (
                    "valid_users",
                    models.TextField(
                        blank=True,
                        help_text="Comma-separated list of users with access",
                    ),
                ),
                (
                    "write_list",
                    models.TextField(
                        blank=True,
                        help_text="Comma-separated list of users with write access",
                    ),
                ),
                (
                    "create_mask",
                    models.CharField(
                        default="0755", help_text="File creation mask", max_length=10
                    ),
                ),
                (
                    "directory_mask",
                    models.CharField(
                        default="0755",
                        help_text="Directory creation mask",
                        max_length=10,
                    ),
                ),
                ("force_user", models.CharField(blank=True, max_length=100)),
                ("force_group", models.CharField(blank=True, max_length=100)),
                ("inherit_acls", models.BooleanField(default=False)),
                ("inherit_permissions", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "mount_point",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated mount point",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="storage.mountpoint",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SharePermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "share_type",
                    models.CharField(
                        choices=[
                            ("smb", "SMB Share"),
                            ("nfs", "NFS Share"),
                            ("ftp", "FTP Share"),
                        ],
                        max_length=10,
                    ),
                ),
                ("share_id", models.IntegerField(help_text="ID of the share")),
                ("user", models.CharField(help_text="Username", max_length=100)),
                (
                    "permission",
                    models.CharField(
                        choices=[
                            ("read", "Read Only"),
                            ("write", "Read/Write"),
                            ("full", "Full Control"),
                            ("deny", "Deny Access"),
                        ],
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["share_type", "share_id", "user"],
                "unique_together": {("share_type", "share_id", "user")},
            },
        ),
        migrations.CreateModel(
            name="NFSShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        help_text="Export path", max_length=255, unique=True
                    ),
                ),
                (
                    "network",
                    models.CharField(
                        default="*",
                        help_text="Network/host pattern (e.g., 192.168.1.0/24, *, hostname)",
                        max_length=100,
                    ),
                ),
                (
                    "options",
                    models.CharField(
                        default="rw,sync,no_subtree_check",
                        help_text="NFS export options",
                        max_length=255,
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                ("comment", models.TextField(blank=True)),
                (
                    "root_squash",
                    models.BooleanField(
                        default=True, help_text="Map root user to anonymous"
                    ),
                ),
                (
                    "all_squash",
                    models.BooleanField(
                        default=False, help_text="Map all users to anonymous"
                    ),
                ),
                (
                    "anonuid",
                    models.IntegerField(
                        blank=True, help_text="Anonymous user ID", null=True
                    ),
                ),
                (
                    "anongid",
                    models.IntegerField(
                        blank=True, help_text="Anonymous group ID", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "mount_point",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated mount point",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="storage.mountpoint",
                    ),
                ),
            ],
            options={
                "ordering": ["path"],
            },
        ),
        migrations.CreateModel(
            name="FTPShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="FTP directory name", max_length=100, unique=True
                    ),
                ),
                (
                    "path",
                    models.CharField(help_text="Local directory path", max_length=255),
                ),
                ("enabled", models.BooleanField(default=True)),
                ("read_only", models.BooleanField(default=False)),
                (
                    "anonymous_access",
                    models.BooleanField(
                        default=False, help_text="Allow anonymous FTP access"
                    ),
                ),
                (
                    "valid_users",
                    models.TextField(
                        blank=True,
                        help_text="Comma-separated list of users with access",
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("upload_enable", models.BooleanField(default=True)),
                ("download_enable", models.BooleanField(default=True)),
                (
                    "max_clients",
                    models.IntegerField(
                        default=10, help_text="Maximum concurrent clients"
                    ),
                ),
                (
                    "max_per_ip",
                    models.IntegerField(
                        default=3, help_text="Maximum connections per IP"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "mount_point",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated mount point",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="storage.mountpoint",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
    ]
